"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Water = void 0;
const Remapper = __importStar(require("swifter_remapper"));
/**
 * Spawns a wall that resembles water.
 * @param startBeat The beat that the water should start on.
 * @param endBeat The beat that the water should end on.
 * @param track What track the water should be assigned to.
 * @param speed How fast the water should move, numbers between 0-5.
 * @param y On which Y position the water should spawn.
 * @author StormPacer
 */
function Water(startBeat, endBeat, track, speed, y) {
    let z = 0;
    switch (speed) {
        case 0:
            z = -1000;
        case 1:
            z = -1100;
        case 2:
            z = -1200;
        case 3:
            z = -1300;
        case 4:
            z = -1400;
        case 5:
            z = -1500;
    }
    let wall = new Remapper.Wall(startBeat, endBeat, 1, 0, 0);
    wall.customData = {
        _track: track,
        _color: [0, 1.5, 2, 10],
        _fake: true,
        _interactable: false,
        _scale: [2000, 0.5, 2000],
        _animation: {
            _definitePosition: [[-1000, y, -1000, 0], [-1000, y, z, 1]]
        }
    };
    wall.push();
}
exports.Water = Water;
