"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingPillars = void 0;
const random_1 = require("../internal/random");
const Remapper = __importStar(require("swifter_remapper"));
/**
 * Spawns in floating pillars on the desired positions and spacing.
 * @param startBeat The beat that the pillars should start on.
 * @param endBeat The beat that the pillars should end on.
 * @param amountPerRow The amount of pillars per row.
 * @param spacing The distance between the pillars.
 * @param startX Where the pillar grid should start on the X axis.
 * @param height How tall the pillars should be.
 * @param width How wide the pillars should be.
 * @param startZ Where the pillar grid should start on the Z axis.
 * @param track The track that the pillars should be assigned to.
 * @param R The red value for the color of the pillars.
 * @param G The green value for the color of the pillars.
 * @param B The blue value for the color of the pillars.
 * @param A The alpha value for the color of the pillars.
 * @author StormPacer
 */
function FloatingPillars(startBeat, endBeat, amountPerRow, spacing, startX, height, width, startZ, track, R, G, B, A) {
    let z = startZ;
    for (let i = 0; i <= amountPerRow; i++) {
        if (z <= spacing * amountPerRow) {
            z += spacing;
            let x = startX;
            for (let i = 0; i <= amountPerRow; i++) {
                if (x <= spacing * amountPerRow) {
                    x += spacing;
                    let wall = new Remapper.Wall(startBeat, endBeat - startBeat, 1, 0, 0);
                    wall.customData = {
                        _track: track,
                        _color: [R, G, B, A],
                        _fake: true,
                        _interactable: false,
                        _scale: [width, height, width],
                        _animation: {
                            _definitePosition: [[x, (0, random_1.Random)(5, 30), z, 0, "easeInOutCubic"], [x, (0, random_1.Random)(5, 30), z, 0.2, "easeInOutCubic"], [x, (0, random_1.Random)(5, 30), z, 0.4, "easeInOutCubic"], [x, (0, random_1.Random)(5, 30), z, 0.6, "easeInOutCubic"], [x, (0, random_1.Random)(5, 30), z, 0.8, "easeInOutCubic"], [x, (0, random_1.Random)(5, 30), z, 1, "easeInOutCubic"]]
                        }
                    };
                    wall.push();
                }
            }
        }
    }
}
exports.FloatingPillars = FloatingPillars;
