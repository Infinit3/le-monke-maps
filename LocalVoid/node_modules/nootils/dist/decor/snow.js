"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snow = void 0;
const random_1 = require("../internal/random");
const Remapper = __importStar(require("swifter_remapper"));
/**
 * Spawns in walls that resemble snow.
 * @param startingBeat The beat that the snow should start on.
 * @param duration For how many beats the snow should last for.
 * @param amount How many walls should be created per beat.
 * @author StormPacer
 */
function Snow(startingBeat, duration, amount) {
    for (let i = 0; i < (duration * amount); i++) {
        let x = (0, random_1.Random)(-40, 40);
        let z = (0, random_1.Random)(0, 50);
        let y = (0, random_1.Random)(60, 80);
        let wall = new Remapper.Wall(startingBeat + (i / amount), 5, 1, 0, 0);
        wall.customData = {
            _color: [1, 1, 1, 4],
            _fake: true,
            _interactable: false,
            _scale: [0.2, 0.2, 0.2],
            _animation: {
                _dissolve: [[0, 0.1], [1, 0.2], [1, 0.9], [0, 1]],
                _definitePosition: [[x, (y = y - 15), z, 0], [(x + (0, random_1.Random)(-4, 4)), (y = y - 15), (z + (0, random_1.Random)(-5, 5)), 0.2], [(x + (0, random_1.Random)(-4, 4)), (y = y - 15), (z + (0, random_1.Random)(-5, 5)), 0.4], [(x + (0, random_1.Random)(-4, 4)), (y = y - 15), (z + (0, random_1.Random)(-5, 5)), 0.6], [(x + (0, random_1.Random)(-4, 4)), (y = y - 15), (z + (0, random_1.Random)(-5, 5)), 0.8], [(x + (0, random_1.Random)(-4, 4)), (y = y - 15), (z + (0, random_1.Random)(-5, 5)), 1]]
            }
        };
        wall.push();
    }
}
exports.Snow = Snow;
