"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ghosty = exports.GhostyTrack = void 0;
const Remapper = __importStar(require("swifter_remapper"));
function InternalGhosty(filteredNotes, speed, maxY, easing = Remapper.EASE.IN_OUT_CUBIC, transparent) {
    const positions = [[0, 0, 0, 0]];
    let positive = false;
    for (let i = speed + 1; i > 0; i--) {
        let pos = positive ? [0, maxY, 0, 0.35 / i, easing] : [0, -maxY, 0, 0.35 / i, easing];
        positions.push(pos);
        positive = !positive;
    }
    positions.push([0, 0, 0, 0.4, easing]);
    filteredNotes.forEach(note => {
        note.animation = {
            _dissolve: [
                transparent ? [0, 0] : [1, 0],
            ],
            _dissolveArrow: [
                [0, 0],
                [1, 0.05],
            ],
            _position: positions,
        };
    });
}
/**
 * Make notes bounce up and down like ghosts.
 * This will override any animations already applied to the notes.
 * @param track The track to apply the effect to.
 * @param speed The speed in how many times it bounces before reaching the player.
 * @param maxY The max Y level the note can reach on negative Y and positive Y
 * @param easing The easing type.
 * @param transparent Should only the arrow be visible?
 * @author cal117
 */
function GhostyTrack(track, speed, maxY, easing = Remapper.EASE.IN_OUT_CUBIC, transparent) {
    const filteredNotes = Remapper.activeDiff.notes.filter(note => {
        if (!note.customData)
            note.customData = {};
        if (Array.isArray(note.customData._track))
            return note.customData._track.includes(track);
        else if (note.customData._track == track)
            return true;
        else
            return false;
    });
    InternalGhosty(filteredNotes, speed, maxY, easing, transparent);
}
exports.GhostyTrack = GhostyTrack;
/**
 * Make notes bounce up and down like ghosts.
 * @param startBeat The beat to start the effect on.
 * @param endBeat The beat to end the effect on.
 * @param speed The speed in how many times it bounces before reaching the player.
 * @param maxY The max Y level the note can reach on negative Y and positive Y
 * @param easing The easing to use.
 * @param transparent Should only the arrow be visible?
 * @author cal117
 */
function Ghosty(startBeat, endBeat, speed, maxY, easing = Remapper.EASE.IN_OUT_CUBIC, transparent) {
    const filteredNotes = Remapper.activeDiff.notes.filter(n => n.time >= startBeat && n.time <= endBeat);
    InternalGhosty(filteredNotes, speed, maxY, easing, transparent);
}
exports.Ghosty = Ghosty;
