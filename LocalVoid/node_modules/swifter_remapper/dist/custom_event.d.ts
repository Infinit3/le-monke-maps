import { AnimationInternals, TrackValue, Track } from './animation';
export declare namespace CustomEventInternals {
    class BaseEvent {
        json: any;
        constructor(time: number | object);
        /**
        * Push this event to the difficulty
        */
        push(): this;
        get time(): any;
        get type(): any;
        get data(): any;
        set time(value: any);
        set type(value: any);
        set data(value: any);
    }
    class AnimateTrack extends BaseEvent {
        animate: AnimationInternals.AbstractAnimation;
        constructor(json: object, track: TrackValue, duration: number, animation: object, easing: string);
        /**
         * Set the properties for animation.
         * @param data
         */
        setProperties(data: object): void;
        /**
         * Apply an animation through the Animation class.
         * @param {Animation} animation
         */
        importAnimation(animation: AnimationInternals.BaseAnimation): this;
        /**
        * Remove the subclass of the event, giving access to all properties, but can allow for invalid data.
        * @returns {AbstractEvent}
        */
        abstract(): AbstractEvent;
        get track(): Track;
        get duration(): any;
        get easing(): any;
        set trackSet(value: TrackValue);
        set duration(value: any);
        set easing(value: any);
    }
    class AssignPathAnimation extends BaseEvent {
        animate: AnimationInternals.AbstractAnimation;
        constructor(json: object, track: string, duration: number, animation: object, easing: string);
        /**
         * Set the properties for animation.
         * @param data
         */
        setProperties(data: object): void;
        /**
         * Apply an animation through the Animation class.
         * @param {Animation} animation
         */
        importAnimation(animation: AnimationInternals.BaseAnimation): this;
        /**
        * Remove the subclass of the event, giving access to all properties, but can allow for invalid data.
        * @returns {AbstractEvent}
        */
        abstract(): AbstractEvent;
        get track(): Track;
        get duration(): any;
        get easing(): any;
        set trackSet(value: TrackValue);
        set duration(value: any);
        set easing(value: any);
    }
    class AssignTrackParent extends BaseEvent {
        constructor(json: object, childrenTracks: string[], parentTrack: string, worldPositionStays: boolean);
        /**
        * Remove the subclass of the event, giving access to all properties, but can allow for invalid data.
        * @returns {AbstractEvent}
        */
        abstract(): AbstractEvent;
        get childrenTracks(): any;
        get parentTrack(): any;
        get worldPositionStays(): any;
        set childrenTracks(value: any);
        set parentTrack(value: any);
        set worldPositionStays(value: any);
    }
    class AssignPlayerToTrack extends BaseEvent {
        constructor(json: object, track: string);
        /**
        * Remove the subclass of the event, giving access to all properties, but can allow for invalid data.
        * @returns {AbstractEvent}
        */
        abstract(): AbstractEvent;
        get track(): Track;
        set trackSet(value: TrackValue);
    }
    class AssignFogTrack extends BaseEvent {
        constructor(json: object, track: string);
        /**
        * Remove the subclass of the event, giving access to all properties, but can allow for invalid data.
        * @returns {AbstractEvent}
        */
        abstract(): AbstractEvent;
        get track(): Track;
        set trackSet(value: TrackValue);
    }
    class AbstractEvent extends BaseEvent {
        animate: AnimationInternals.AbstractAnimation;
        constructor(json: object);
        /**
         * Add properties to the data.
         * @param data
         */
        appendData(data: object): void;
        /**
         * Apply an animation through the Animation class.
         * @param {Animation} animation
         */
        importAnimation(animation: AnimationInternals.BaseAnimation): this;
        get track(): Track;
        get duration(): any;
        get easing(): any;
        get childrenTracks(): any;
        get parentTrack(): any;
        get worldPositionStays(): any;
        set trackSet(value: TrackValue);
        set duration(value: any);
        set easing(value: any);
        set childrenTracks(value: any);
        set parentTrack(value: any);
        set worldPositionStays(value: any);
    }
}
export declare class CustomEvent extends CustomEventInternals.BaseEvent {
    /**
     * Event object for ease of creation.
     * @param {Object} time
     */
    constructor(time?: number);
    /**
     * Create a custom event using JSON.
     * @param {Object} json
     * @returns {AbstractEvent}
     */
    import(json: object): CustomEventInternals.AbstractEvent;
    /**
     * Create an event with no particular identity.
     * @returns {AbstractEvent};
     */
    abstract(): CustomEventInternals.AbstractEvent;
    /**
     * Animate a track.
     * @param {String} track
     * @param {Number} duration
     * @param {Object} animation JSON for the animation.
     * @param {String} easing
     * @returns
     */
    animateTrack(track: string, duration?: number, animation?: object, easing?: string): CustomEventInternals.AnimateTrack;
    /**
     * Animate objects on a track across their lifespan.
     * @param {String} track
     * @param {Number} duration
     * @param {Object} animation JSON for the animation.
     * @param {String} easing
     * @returns
     */
    assignPathAnimation(track: string, duration?: number, animation?: object, easing?: string): CustomEventInternals.AssignPathAnimation;
    /**
     * Assign a parent to a track.
     * @param {Array} childrenTracks
     * @param {String} parentTrack
     * @param {Boolean} worldPositionStays Object stays in the same place after being parented, false by default.
     * @returns
     */
    assignTrackParent(childrenTracks: string[], parentTrack: string, worldPositionStays?: boolean): CustomEventInternals.AssignTrackParent;
    /**
     * Assign the player to a track.
     * @param {String} track
     * @returns
     */
    assignPlayerToTrack(track: string): CustomEventInternals.AssignPlayerToTrack;
    /**
     * Assign the fog to a track.
     * @param {String} track
     * @returns
     */
    assignFogTrack(track: string): CustomEventInternals.AssignFogTrack;
}
