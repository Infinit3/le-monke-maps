import { AnimationInternals, TrackValue, Track } from './animation';
import { Vec3 } from './general';
import { CustomEventInternals } from './custom_event';
import { LOOKUP } from './constants';
export declare class Environment {
    json: any;
    /**
     * Environment object for ease of creation and additional tools.
     * @param {String} id
     * @param {String} lookupMethod
     */
    constructor(id?: string, lookupMethod?: LOOKUP);
    /**
    * Create an environment object using JSON.
    * @param {Object} json
    * @returns {Environment}
    */
    import(json: any): this;
    /**
     * Push this environment object to the difficulty
     */
    push(): this;
    get id(): string;
    get lookupMethod(): LOOKUP;
    get duplicate(): number;
    get active(): boolean;
    get scale(): number[];
    get position(): number[];
    get localPosition(): number[];
    get rotation(): number[];
    get localRotation(): number[];
    get lightID(): number;
    get track(): Track;
    get group(): string;
    get animationProperties(): any;
    set id(value: string);
    set lookupMethod(value: LOOKUP);
    set duplicate(value: number);
    set active(value: boolean);
    set scale(value: number[]);
    set position(value: number[]);
    set localPosition(value: number[]);
    set rotation(value: number[]);
    set localRotation(value: number[]);
    set lightID(value: number);
    set trackSet(value: TrackValue);
    set group(value: string);
}
export declare namespace BlenderEnvironmentInternals {
    class BaseBlenderEnvironment {
        scale: [number, number, number];
        anchor: [number, number, number];
        constructor(scale: Vec3, anchor: Vec3);
        processData(trackData: any[] | string): any[];
    }
    class BlenderAssigned extends BaseBlenderEnvironment {
        track: string;
        disappearWhenAbsent: boolean;
        constructor(scale: Vec3, anchor: Vec3, track: string, disappearWhenAbsent: boolean);
        getDataForTrack(dataTrack: string): any[];
        static(dataTrack: string, forEvents?: (moveEvent: CustomEventInternals.AnimateTrack) => void): void;
        animate(dataTrack: string, time: number, duration: number, forEvents?: (moveEvent: CustomEventInternals.AnimateTrack) => void): void;
    }
}
export declare class BlenderEnvironment extends BlenderEnvironmentInternals.BaseBlenderEnvironment {
    id: string;
    trackID: number;
    lookupMethod: LOOKUP;
    assigned: BlenderEnvironmentInternals.BlenderAssigned[];
    objectAmounts: number[][];
    maxObjects: number;
    /**
    * Tool for using model data from ScuffedWalls for environments.
    * @param {Array} scale The scale of the object relative to a noodle unit cube.
    * @param {Array} anchor The anchor point of rotation on the object, 1 = length of object on that axis.
    */
    constructor(scale: Vec3, anchor: Vec3, id?: string, lookupMethod?: LOOKUP);
    /**
     * Assign pre-existing tracks to be animated with this environment.
     * For example if the current data track is "shore" and you assign an object with track "cloud", there needs to be data for the track "shore_cloud".
     * In your shore model if you set the second material name to shore_cloud, you can move represent the cloud's transform by that object.
     * @param {Array} tracks Can be a single track or array of tracks.
     * @param {Vec3} scale
     * @param {Vec3} anchor
     * @param {Boolean} disappearWhenAbsent Determine whether to make this object disappear when no data for it is present in an environment.
     */
    assignObjects(tracks: string | string[], scale?: Vec3, anchor?: Vec3, disappearWhenAbsent?: boolean): void;
    /**
     * Look up the amount of objects active in the environment at a certain beat.
     * You'll want to do this after all of the environment switches (if any), so that the maximum can be properly calculated.
     * @param time
     */
    lookupAmount(time: any): number;
    /**
     * Set the environment to be static. Should only be used once.
     * @param {String} dataTrack The track ScuffedWalls will output for this model's data.
     * If left undefined, a debug model with debug walls, useful for fitting objects to a cube, will be placed.
     * @param {Function} forEnv Runs for each environment object.
     * @param {Function} forAssigned Runs for each assigned object moving event.
     */
    static(dataTrack?: string, forEnv?: (envObject: Environment, objects: number) => void, forAssigned?: (moveEvent: CustomEventInternals.AnimateTrack) => void): void;
    /**
     * Set the environment to switch to different models at certain times. Also uses model animations.
     * @param {Array} switches First element is the data track of the switch, second element is the time,
     * third element (optional) is the duration of the animation.
     * fourth element (optional) is a function to run per environment moving event.
     * fifth element (optional) is a function to run per assigned object moving event.
     * @param {Function} forEnvSpawn function to run for each initial environment object.
     */
    animate(switches: [
        string,
        number,
        number?,
        ((moveEvent: CustomEventInternals.AnimateTrack, objects: number) => void)?,
        ((moveEvent: CustomEventInternals.AnimateTrack) => void)?
    ][], forEnvSpawn?: (envObject: Environment) => void): void;
    /**
     * Get the track for a piece of the environment, if it's been animated.
     * @param {Number} index
     * @returns {Number}
     */
    getPieceTrack(index: number): string;
}
/**
 * Animate each environment piece in a given assigned group, with all of their individual transforms combined.
 * @param {String} group
 * @param {Number} time
 * @param {Number} duration
 * @param {Object} animation
 * @param {String} easing
 */
export declare function animateEnvGroup(group: string, time: number, duration: number, animation: AnimationInternals.BaseAnimation, easing?: string): void;
/**
 * Animate an environment piece with a track, with all of it's initial transforms combined.
 * @param {String} group
 * @param {Number} time
 * @param {Number} duration
 * @param {Object} animation
 * @param {String} easing
 */
export declare function animateEnvTrack(track: string, time: number, duration: number, animation: AnimationInternals.BaseAnimation, easing?: string): void;
