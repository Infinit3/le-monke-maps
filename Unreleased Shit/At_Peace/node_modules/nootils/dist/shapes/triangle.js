"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Triangle = void 0;
const Remapper = __importStar(require("swifter_remapper"));
/**
 * Spawns a wall triangle that you can later animate with AnimateTrack.
 * @param startTime The beat that the triangle should be spawned on.
 * @param endTime The beat that the triangle should disappear.
 * @param track What track the triangle walls should be assigned to.
 * @param x On which X position the triangle should spawn.
 * @param y On which Y position the triangle should spawn.
 * @param z On which Z position the triangle should spawn.
 * @param length How long the triangle walls should be.
 * @author StormPacer
 */
function Triangle(startTime, endTime, track, x, y, z, length) {
    let wall1 = new Remapper.Wall(startTime, endTime - startTime, 0, 1);
    wall1.customData = {
        _scale: [10, 0.1, length],
        _track: track,
        _animation: {
            _definitePosition: [[x, y, z, 0]]
        }
    };
    wall1.push();
    let wall2 = new Remapper.Wall(startTime, endTime - startTime, 0, 1);
    wall2.customData = {
        _scale: [10, 0.1, length],
        _localRotation: [0, 0, -60],
        _track: track,
        _animation: {
            _definitePosition: [[2.39 + x, 4.25 + y, z, 0]]
        }
    };
    wall2.push();
    let wall3 = new Remapper.Wall(startTime, endTime - startTime, 0, 1);
    wall3.customData = {
        _scale: [10, 0.1, length],
        _localRotation: [0, 0, 60],
        _track: track,
        _animation: {
            _definitePosition: [[-2.39 + x, 4.25 + y, z, 0]]
        }
    };
    wall3.push();
}
exports.Triangle = Triangle;
