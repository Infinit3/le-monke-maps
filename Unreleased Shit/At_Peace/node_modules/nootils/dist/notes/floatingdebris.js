"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FloatingDebris = void 0;
const Remapper = __importStar(require("swifter_remapper"));
const random_1 = require("../internal/random");
/**
 * Gives the effect of floating debris when you slice a note.
 * @param startBeat The beat on which the effect should start on.
 * @param endBeat The beat to end the effect on.
 * @param duration How long the debris will last, defaulted to 2.
 * @param spread How far the debris will go, defaulted to 1.
 * @author Pangwen
 */
function FloatingDebris(startBeat, endBeat, duration = 2, spread = 1) {
    Remapper.notesBetween(startBeat, endBeat, note => {
        if (note.type != Remapper.NOTE.BOMB) {
            let dupe = new Remapper.Note(note.time, note.type, note.direction, note.position);
            dupe.noteGravity = false;
            dupe.noteLook = false;
            dupe.spawnEffect = false;
            dupe.fake = true;
            dupe.interactable = false;
            dupe.offset = duration;
            dupe.animation._dissolveArrow = [[0, 0]];
            dupe.animation._dissolve = [[0, 0], [0, 0.5], [0.85, 0.501], [0, 1, "easeOutCubic"]];
            dupe.animation._localRotation = [[0, 0, 0, 0.5], [(0, random_1.Random)(-180, 180), (0, random_1.Random)(-180, 180), (0, random_1.Random)(-180, 180), 1]];
            if (note.direction == Remapper.NOTE.UP) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [0 * spread, 3, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.DOWN) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [0 * spread, -3, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.LEFT) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [-3 * spread, 0, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.RIGHT) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [3 * spread, 0, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.UP_LEFT) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [-3 * spread, 3, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.UP_RIGHT) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [3 * spread, 3, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.DOWN_LEFT) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [-3 * spread, -3, 5, 1, "easeOutCubic"]];
            }
            else if (note.direction == Remapper.NOTE.DOWN_RIGHT) {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [3 * spread, -3, 5, 1, "easeOutCubic"]];
            }
            else {
                dupe.animation._definitePosition = [[0, 0, 0, 0], [0, 0, 0, 0.5], [(0, random_1.Random)(-3, 3), (0, random_1.Random)(-3, 3), 5, 1, "easeOutCubic"]];
            }
            dupe.push();
        }
    });
}
exports.FloatingDebris = FloatingDebris;
;
