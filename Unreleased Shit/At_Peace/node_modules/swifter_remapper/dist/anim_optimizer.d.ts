import { Keyframe, KeyframesAny } from "./animation";
export declare type OptimizeFunction = (pointA: Keyframe, pointB: Keyframe, pointC: Keyframe | undefined) => Keyframe | undefined;
/**
 * Terminology
 * Treshold:   The minimum delta required for points to be retained.
 *             If the delta is LESS than the threshold, the point will be considered for removal
 *
 */
/**
 * Settings for the "optimizeSimilarPoints" optimizing function, starts at default values.
 */
export declare class OptimizeFloatingPointsSettings {
    decimals: number;
}
/**
 * Settings for the "optimizeSimilarPoints" optimizing function, starts at default values.
 */
export declare class OptimizeSimilarPointsSettings {
    differenceThreshold: number;
    timeDifferenceThreshold: number;
}
/**
 * Settings for the "optimizeSimilarPointsSlope" optimizing function, starts at default values.
 */
export declare class OptimizeSimilarPointsSlopeSettings {
    differenceThreshold: number;
    timeDifferenceThreshold: number;
    yInterceptDifferenceThreshold: number;
}
/**
 * Settings for the animation optimizer, starts at default values.
 */
export declare class OptimizeSettings {
    passes: number;
    performance_log: boolean;
    optimizeDuplicates: boolean | undefined;
    optimizeFloatingPoints: OptimizeFloatingPointsSettings | undefined;
    optimizeSimilarPoints: OptimizeSimilarPointsSettings | undefined;
    optimizeSimilarPointsSlope: OptimizeSimilarPointsSlopeSettings | undefined;
    additionalOptimizers: OptimizeFunction[] | undefined;
}
/**
 * Optimizes animations, removing unnecessary points.
 * @param {KeyframesAny} animation keyframe or array of keyframes to optimize.
 * @param {OptimizeSettings} settings settings for the optimizer.
 * @returns {KeyframesAny}
 */
export declare function optimizeAnimation(animation: KeyframesAny, settings: OptimizeSettings): KeyframesAny;
