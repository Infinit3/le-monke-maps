import { Note } from './note';
import { Wall } from './wall';
import { EventInternals } from './event';
import { CustomEventInternals } from './custom_event';
import { Environment } from './environment';
import { Vec3 } from './general';
import { OptimizeSettings } from './anim_optimizer';
export declare class Difficulty {
    json: any;
    diffSet: any;
    diffSetMap: any;
    mapFile: any;
    relativeMapFile: string;
    /**
     * Creates a difficulty. Can be used to access various information and the map data.
     * Will set the active difficulty to this.
     * @param {String} input Filename for the input.
     * @param {String} input Filename for the output. If left blank, input will be used.
     */
    constructor(input: string, output?: string);
    optimize(optimize?: OptimizeSettings): void;
    /**
     * Saves the difficulty.
     * @param {String} diffName Filename for the save. If left blank, the beatmap file name will be used for the save.
     */
    save(diffName?: string): void;
    /**
     * Add/remove a requirement from the difficulty.
     * @param {String} requirement
     * @param {Boolean} required True by default, set to false to remove the requirement.
     */
    require(requirement: string, required?: boolean): void;
    /**
     * Add/remove a suggestion from the difficulty.
     * @param {String} suggestion
     * @param {Boolean} suggested True by default, set to false to remove the suggestion.
     */
    suggest(suggestion: string, suggested?: boolean): void;
    /**
     * Set a setting.
     * @param {String} setting The path of the setting.
     * @param {Any} value The value of the setting, leave blank to remove setting.
     */
    setSetting(setting: string, value?: any): void;
    private updateSets;
    private colorArrayToTuple;
    get NJS(): number;
    get offset(): number;
    get fileName(): string;
    get diffSetName(): string;
    get name(): string;
    get diffRank(): number;
    get requirements(): string[];
    get suggestions(): string[];
    get settings(): any;
    get warnings(): string[];
    get information(): string[];
    get label(): string;
    get editorOffset(): number;
    get editorOldOffset(): number;
    get colorLeft(): Vec3;
    get colorRight(): Vec3;
    get lightColorLeft(): Vec3;
    get lightColorRight(): Vec3;
    get boostColorLeft(): Vec3;
    get boostColorRight(): Vec3;
    get obstacleColor(): Vec3;
    set NJS(value: number);
    set offset(value: number);
    set fileName(value: string);
    set diffSetName(value: string);
    set name(value: string);
    set diffRank(value: number);
    set requirements(value: string[]);
    set suggestions(value: string[]);
    set settings(value: any);
    set warnings(value: string[]);
    set information(value: string[]);
    set label(value: string);
    set editorOffset(value: number);
    set editorOldOffset(value: number);
    set colorLeft(value: Vec3);
    set colorRight(value: Vec3);
    set lightColorLeft(value: Vec3);
    set lightColorRight(value: Vec3);
    set boostColorLeft(value: Vec3);
    set boostColorRight(value: Vec3);
    set obstacleColor(value: Vec3);
    get version(): string;
    get notes(): Note[];
    get obstacles(): Wall[];
    get events(): EventInternals.AbstractEvent[];
    get waypoints(): any[];
    get customData(): any;
    get customEvents(): CustomEventInternals.BaseEvent[];
    get pointDefinitions(): any[];
    get environment(): Environment[];
    set version(value: string);
    set notes(value: Note[]);
    set obstacles(value: Wall[]);
    set events(value: EventInternals.AbstractEvent[]);
    set waypoints(value: any[]);
    set customData(value: any);
    set customEvents(value: CustomEventInternals.BaseEvent[]);
    set pointDefinitions(value: any[]);
    set environment(value: Environment[]);
}
export declare class Info {
    json: any;
    fileName: string;
    load(path?: string): void;
    /**
     * Saves the Info.dat
     */
    save(): void;
    private updateInfo;
    get version(): any;
    get name(): any;
    get subName(): any;
    get authorName(): any;
    get mapper(): any;
    get BPM(): any;
    get previewStart(): any;
    get previewDuration(): any;
    get songOffset(): any;
    get shuffle(): any;
    get shufflePeriod(): any;
    get coverFileName(): any;
    get songFileName(): any;
    get environment(): any;
    get environment360(): any;
    get customData(): any;
    get editors(): any;
    get contributors(): any;
    get customEnvironment(): any;
    get customEnvironmentHash(): any;
    set version(value: any);
    set name(value: any);
    set subName(value: any);
    set authorName(value: any);
    set mapper(value: any);
    set BPM(value: any);
    set previewStart(value: any);
    set previewDuration(value: any);
    set songOffset(value: any);
    set shuffle(value: any);
    set shufflePeriod(value: any);
    set coverFileName(value: any);
    set songFileName(value: any);
    set environment(value: any);
    set environment360(value: any);
    set customData(value: any);
    set editors(value: any);
    set contributors(value: any);
    set customEnvironment(value: any);
    set customEnvironmentHash(value: any);
}
export declare const info: Info;
export declare let activeDiff: Difficulty;
export declare let forceJumpsForNoodle: boolean;
/**
 * Set the difficulty that objects are being created for.
 * @param {Object} diff
 */
export declare function activeDiffSet(diff: Difficulty): void;
/**
 * Set whether exported walls and notes with custom data will have their NJS / Offset forced.
 * This helps avoid things like JDFixer breaking things. Should be set before your scripting.
 * @param {Boolean} value
 */
export declare function forceJumpsForNoodleSet(value: boolean): void;
/**
 * Automatically zip the map, including only necessary files.
 * @param {String[]} excludeDiffs Difficulties to exclude.
 * @param {String} zipName Name of the zip (don't include ".zip"). Uses folder name if undefined.
 */
export declare function exportZip(excludeDiffs?: string[], zipName?: string): void;
/**
 * Transfer the visual aspect of maps to other difficulties.
 * More specifically modded walls, custom events, point definitions, environment enhancements, and lighting events.
 * @param {Array} diffs The difficulties being effected.
 * @param {Function} forDiff A function to run over each difficulty.
 * The activeDiff keyword will change to be each difficulty running during this function.
 * Be mindful that the external difficulties don't have an input/output structure,
 * so new pushed notes for example may not be cleared on the next run and would build up.
 */
export declare function transferVisuals(diffs: string[], forDiff?: (diff: Difficulty) => void): void;
